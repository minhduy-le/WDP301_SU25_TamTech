// socket.js - Fixed Version

const socketIo = require("socket.io");
const jwt = require("jsonwebtoken");
const Message = require("../models/message");
const ChatRoomUser = require("../models/ChatRoomUser");
const User = require("../models/user");

const initializeSocket = (server) => {
  const io = socketIo(server, {
    cors: {
      origin: ["https://wdp301-su25.space", "http://wdp301-su25.space", "http://localhost:3000"],
      methods: ["GET", "POST"],
      credentials: true,
    },
    transports: ["websocket", "polling"],
    allowEIO3: true, // Cho ph√©p c·∫£ phi√™n b·∫£n Engine.IO 3
  });

  // Middleware ƒë·ªÉ x√°c th·ª±c token cho m·ªói k·∫øt n·ªëi Socket.IO
  io.use((socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace("Bearer ", "");

      if (!token) {
        console.error("‚ùå Socket Auth Error: No token provided.");
        return next(new Error("Authentication error: No token provided"));
      }

      // S·ª≠ d·ª•ng environment variable cho JWT secret
      const jwtSecret = process.env.JWT_SECRET || "abc1b062fb4d5b0543294a9999dc4a9c3f0996be1044b5dd6389eb3dda8331f8";

      jwt.verify(token, jwtSecret, (err, decoded) => {
        if (err) {
          console.error("‚ùå Socket Auth Error: Invalid token.", { error: err.message });
          return next(new Error("Authentication error: Invalid token"));
        }

        if (!decoded.id) {
          console.error("‚ùå Socket Auth Error: No user ID in token.");
          return next(new Error("Authentication error: No user ID"));
        }

        // G·∫Øn th√¥ng tin user v√†o ƒë·ªëi t∆∞·ª£ng socket ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        socket.userId = decoded.id;
        console.log(`üîê Socket authenticated for user: ${decoded.id}`);
        next(); // Cho ph√©p k·∫øt n·ªëi
      });
    } catch (error) {
      console.error("‚ùå Socket Auth Error:", error.message);
      return next(new Error("Authentication error"));
    }
  });

  io.on("connection", (socket) => {
    // T·ª´ ƒë√¢y tr·ªü ƒëi, m·ªçi socket ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    const userId = socket.userId;
    console.log(`‚úÖ User connected: ${userId} (Socket ID: ${socket.id})`);

    // M·ªói user s·∫Ω join v√†o m·ªôt "ph√≤ng" ri√™ng c·ªßa m√¨nh
    socket.join(`user_${userId}`);

    // Join v√†o c√°c chat rooms m√† user tham gia
    socket.on("joinChatRoom", async (chatRoomId) => {
      try {
        // Ki·ªÉm tra user c√≥ trong chat room kh√¥ng
        const chatRoomUser = await ChatRoomUser.findOne({
          where: { chatRoomId, userId },
        });

        if (chatRoomUser) {
          socket.join(`room_${chatRoomId}`);
          console.log(`‚úÖ User ${userId} joined chat room ${chatRoomId}`);
          socket.emit("joinedChatRoom", { chatRoomId, success: true });
        } else {
          socket.emit("joinedChatRoom", { chatRoomId, success: false, error: "Not authorized to join this room" });
        }
      } catch (error) {
        console.error("‚ùå Error joining chat room:", error.message);
        socket.emit("joinedChatRoom", { chatRoomId, success: false, error: "Failed to join room" });
      }
    });

    socket.on("sendMessage", async ({ chatRoomId, receiverId, content }, callback) => {
      try {
        const senderId = socket.userId;
        console.log(`üì§ Message from ${senderId} to ${receiverId || "room " + chatRoomId}:`, content);

        // Validate input
        if (!content || content.trim() === "") {
          const error = "Message content cannot be empty";
          console.error("‚ùå", error);
          if (callback) callback({ success: false, error });
          return;
        }

        // Ki·ªÉm tra authorization n·∫øu g·ª≠i ƒë·∫øn chat room
        if (chatRoomId) {
          const chatRoomUser = await ChatRoomUser.findOne({
            where: { chatRoomId, userId: senderId },
          });
          if (!chatRoomUser) {
            const error = "Not authorized to send message to this room";
            console.error("‚ùå", error);
            if (callback) callback({ success: false, error });
            return;
          }
        }

        const message = await Message.create({
          chatRoomId,
          senderId,
          receiverId,
          content: content.trim(),
        });

        // L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n ƒë·ªÉ g·ª≠i k√®m tin nh·∫Øn
        const sender = await User.findByPk(senderId, { attributes: ["id", "fullName"] });
        const receiver = receiverId ? await User.findByPk(receiverId, { attributes: ["id", "fullName"] }) : null;

        const messageData = {
          id: message.id,
          chatRoomId: message.chatRoomId || null,
          senderId,
          receiverId,
          content: content.trim(),
          createdAt: message.createdAt,
          Sender: sender?.get({ plain: true }),
          Receiver: receiver?.get({ plain: true }),
        };

        if (chatRoomId) {
          // G·ª≠i ƒë·∫øn m·ªôt ph√≤ng chat c·ª• th·ªÉ
          io.to(`room_${chatRoomId}`).emit("message", messageData);
        } else if (receiverId) {
          // G·ª≠i tr·ª±c ti·∫øp cho ng∆∞·ªùi nh·∫≠n v√† c·∫£ ng∆∞·ªùi g·ª≠i (ƒë·ªÉ ƒë·ªìng b·ªô tr√™n c√°c thi·∫øt b·ªã)
          io.to(`user_${senderId}`).to(`user_${receiverId}`).emit("message", messageData);
        }

        if (callback) callback({ success: true, message: "Message sent successfully", data: messageData });
      } catch (error) {
        console.error("‚ùå Error sending message:", error.message);
        if (callback) callback({ success: false, error: "Failed to send message" });
      }
    });

    socket.on("disconnect", (reason) => {
      console.log(`‚ùå User disconnected: ${socket.userId} (Socket ID: ${socket.id}) - Reason: ${reason}`);
    });

    socket.on("ping", (callback) => {
      if (callback) callback({ success: true, userId: socket.userId, timestamp: new Date().toISOString() });
    });

    // Error handling
    socket.on("error", (error) => {
      console.error(`‚ùå Socket error for user ${socket.userId}:`, error);
    });
  });

  // Global error handling
  io.engine.on("connection_error", (err) => {
    console.error("‚ùå Connection error:", {
      message: err.message,
      description: err.description,
      context: err.context,
      type: err.type,
    });
  });

  return io;
};

module.exports = initializeSocket;
